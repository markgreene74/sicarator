version: 2.1

orbs:

<% if (packageManager === "pyenv + poetry") { -%>
executors:
  base-python:
    docker:
      - image: cimg/python:<%= pythonVersion %>

commands:
  get_code_and_cache:
    steps:
      - checkout
      # Restore cached poetry
      - run:
          name: Remove docker image default poetry installation (so that right version can be restored from cache)
          command: |
            rm -rf /home/circleci/.local/share/pypoetry
      - restore_cache:
          keys:
            - poetry-1.7.0
      # Restore cached dependencies
      - restore_cache:
          keys:
            - project-dependencies-poetry-1.7.0-{{ checksum "poetry.lock" }}

jobs:
  install:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: Install Poetry right version (if not already restored from cache)
          command: |
            [ -d "/home/circleci/.local/share/pypoetry" ] || curl -sSL https://install.python-poetry.org | python - --version 1.7.0
      - save_cache:
          key: poetry-1.7.0
          paths:
            - /home/circleci/.local/share/pypoetry
      - run:
          name: Install dependencies
          command: |
            poetry run pip install --upgrade pip
            poetry install --no-root
      - save_cache:
          key: project-dependencies-poetry-1.7.0-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
            - /home/circleci/.poetry/env
<% } else { -%>
executors:
  base-python:
    docker:
      - image: ghcr.io/astral-sh/uv:0.5.5-python3.11-bookworm-slim

commands:
  get_code_and_cache:
    steps:
      - checkout
      - run:
          name: install make
          command: apt update && apt install make
      # Restore cached dependencies
      - restore_cache:
          keys:
            - project-dependencies-uv-0.5.5-{{ checksum "uv.lock" }}-{{ .Environment.CACHE_VERSION }}

jobs:
  install:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: Install dependencies
          command: |
            uv sync
            uv cache prune --ci
      - save_cache:
          key: project-dependencies-uv-0.5.5-{{ checksum "uv.lock" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - /root/project/.venv
            - /root/.cache/uv
            - /root/.local/share/uv/python
<% } -%>

  test:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: run pytest
          command: make test
      - store_test_results:
          path: tests-results.xml
      - store_artifacts:
          path: htmlcov

  format-check:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: run formatter
          command: make format-check

  lint-check:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: run linter
          command: make lint-check

  type-check:
    executor: base-python
    steps:
      - get_code_and_cache
      - run:
          name: run type checker
          command: make type-check

workflows:
  version: 2
  quality_checks:
    jobs:
      - install
      - test:
          requires:
            - install
      - lint-check:
          requires:
            - install
      - format-check:
          requires:
            - install
      - type-check:
          requires:
            - install
